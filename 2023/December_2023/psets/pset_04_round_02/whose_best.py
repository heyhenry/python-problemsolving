"""
3. Who's the best
2 / 2
We wanna figure out who has the best name. Fortunately we have a perfect ordering of names (generated by
a magical AI), and just need a way to understand what it spits out. Then print out the best one!
File format: a series of lines of the form Name1 > Name2
Output: one of three things:
1. if a name is better than all others, then that name
2. if multiple names could be the best, then "UNKNOWN"
3. if there's a contradiction (Name1 > Name2, but Name2 > Name1), then "INVALID"
"""
import sys
def whose_best(filename : str):

    result = ''

    with open(filename, 'r') as file:
        read_content = file.read()

        if read_content:

            # store each line as an element into a list
            store_lines = read_content.splitlines()

            # store each name per line as its own element in its own list, then into a list
            content = []
            for row in store_lines:
                content.append(row.split(' > '))

            # initialize and store each unique name into names dictionary
            names = {}
            for row in content:
                for i in row:
                    if i not in names:
                        names[i] = []

            # store all names that are less than another name via key : value ratio
            for row in content:
                names[row[0]].append(row[1])

            # if a key is found inside another key's values,
            # then also allow the other key to inherit that key's values into their own value
            for key, value in names.items():
                for s_key, s_value in names.items():
                    if key in s_value:
                        for v in value:
                            if v not in names[s_key]:
                                names[s_key].append(v)

            # find the greatest name logic time
            # checks each key against the other keys in the dictionary
            # if a key is not found in the value section of any other key, then store in great_names
            
            # the 'unknown' check :
            # if great_names has more than 1 name stored, this means that there are multiple names 
            # that can be considered the greatest, which means there is not enough data so its 'Unknown'
            
            # the 'invalid' check
            # if there are no names stored in great_names, this means that each key is in atleast 1 other key's values
            # this would result in contradictions, so it can be deemed invalid
                                
            # the 'greatest name' conclusion
            # due to the usage of a if-else conditional to assess the conclusion, if the first 2 checks are not triggered
            # aka, the greatest_name's list has a no greater length than 1 and is no less than 1
            # it means that during the looping, only 1 name was found to be not found in any of the other key's value
            # however, it possesses the values of the other keys (making it greater) either by direct relationship or inherited ones
            great_names = []
            # the looping through each key against other keys
            for key, value in names.items():
                is_great_name = True
                for s_key, s_value in names.items():
                    if key in s_value:
                        is_great_name = False
                if is_great_name:
                    great_names.append(key)
            
            # the final conclusive check to determine the result
            if len(great_names) > 1:
                result = 'UNKNOWN'
            elif len(great_names) < 1:
                result = 'INVALID'
            else:
                result = great_names[0]

    return result

def main():
    print(whose_best(sys.argv[1]))

if __name__ == "__main__":
    main()